swagger: "2.0"
info:
	title: beepbeep Data Service
	description: returns info about beepbeep
	license:
		name: APLv2
		url: https://www.apache.org/licenses/LICENSE-2.0.html
	version: 0.1.0
basePath: /api
paths:
		/users:
			get:
				operationId: getUsers
				description: Returns a list of users
				produces:
					- application/json
				responses:
					'200':
						description: List of user objects
						schema:
							type: array
							items:
								type: user
			post:
				operationId: addUser
				description: Adds a new user
				produces:
					- application/json
				parameters:
					- name: email
					  in: body
					  description: user email
					  required: true
					  type: string
					- name: firstname
					  in: body
					  description: first name
					  required: true
					  type: string
					- name: lastname
					  in: body
					  description: user last name
					  required: true
					  type: string
					- name: age
					  in: body
					  description: user age
					  required: false
					  type: integer
					- name: weight
					  in: body
					  description: user weight
					  required: false
					  type: integer
					- name: max_hr
					  in: body
					  description: max heart rate
					  required: false
					  type: float
					- name: rest_hr
					  in: body
					  description: heart rate at rest
					  required: false
					  type: float
					- name: vo2max
					  in: body
					  description: max volume of oxygen
					  required: false
					  type: float
				responses:
					'200':
						description: new user object
						schema:
							type: user
					'409':
						description: The user already exists
					'400':
						description: bad request


		/user/{user_id}:
			get:
				operationId: getUser
				description: Returns a single user
				produces:
					- application/json
				parameters:
					- name: user_id
					  in: path
					  required: true
				responses:
					'200':
						description: User object
						schema:
							type: user
					'404':
						description: The user doesn't exists
			delete:
				operationId: deleteUser
				description: Deletion of the user
				produces:
					- application/json
				parameters:
					- name: user_id
					  in: path
					  required: true
				responses:
					'200':
						description: The deletion is successful
					'404':
						description: The user does not exists
					'400':
						description: bad request

		/runs:
			post:
				operationId: addRuns
				description: Adds runs
				produces:
					- application/json
				parameters:
					- name: title
					  in: body
					  required: true
					  type: string
					- name: description
					  in: body
					  required: true
					  type: string
					- name: strava_id
					  in: body
					  required: true
					  type: integer
					- name: distance
					  in: body
					  required: true
					  type: float
					- name: start_date
					  in: body
					  required: true
					  type: date
					- name: elapsed_time
					  in: body
					  required: true
					  type: float
					- name: average_speed
					  in: body
					  required: true
					  type: float
					- name: average_heartrate
					  in: body
					  required: true
					  type: float
					- name: total_elevation_gain
					  in: body
					  required: true
					  type: float
					- name: runner_id
					  in: body
					  required: true
					  type: integer
				responses:
					'200':
						description: List of run object
						  schema:
							  type: array
							  items:
								  type: Run
					'400':
						description: bad request
			get:
				operationId: getRuns
				description: Get Runs of the user id
				produces:
					- application/json
				parameters:
					- name: user_id
					  in: query
					  description: The user id
					  required: true
					  type: integer
				responses:
					  '200':
						  description: List of run objects
							  schema:
								  type: array
								  items:
									  type: run
					  '400':
						  description: bad request


		/runs/{run_id}:
			get:
				operationId: getRun
				description: Returns a single run
				produces:
					- application/json
				parameters:
					- name: run_id
					  in: path
			    responses:
				    '200':
					    description: run object
					    schema:
						    type: run
				    '404':
					    description: The run doesn't exists

		/objectives:
			get:
				operationId: getObjectives
				description: Return all the objectives of the user id
				produces:
					- application/json
				parameters:
					- name: user_id
					  in: query
					  description: The user id
					  required: true
					  type: integer
			    responses:
				    '200':
					    description: List of objective objects
					    schema:
						    type: array
						    items:
							    type: objective
					'400':
						description: bad request
					'404':
						description: The challenge does not exists
			post:
				operationId: createObjective
				description: Create a new Objective object
				produces:
					- application/json
				parameters:
					- name: user_id
					  in: query
					  description: The user id
					  required: true
					  type: integer
					- name: name
					  in: body
					  description: name of the objective
					  required: true
					  type: string
					- name: target_distance
					  in: body
					  description: target distance of the objective
					  required: true
					  type: float
					- name: start_date
					  in: body
					  description: start date of the objective
					  required: true
					  type: date
					- name: end_date
					  in: body
					  description: end date of the objective
					  required: true
					  type: date
					- name: runner_id
					  in: body
					  description: user id
					  required: true
					  type: integer
				responses:
					'200':
						description: objective object
						schema:
							type: objective
					'400':
						description: bad request

		/objectives/{objective_id}:
			get:
				operationId: getObjective
				description: Return the objective id of the user id
				produces:
					- application/json
				parameters:
					- name: objective_id
					  in: path
					  required: true
					- name: user_id
					  in: query
					  description: The user id
					  required: true
					  type: integer
				responses:
					'200':
						description: objective object
						schema:
							type: objective
					'400':
						description: bad request


		/challenges:
			get:
				operationId: getChallenges
				description: Return all the challenges of the user id
				produces:
					- application/json
				parameters:
					- name: user_id
					  in: query
					  description: The user id
					  required: true
					  type: integer
			    responses:
				    '200':
					    description: List of challenge objects
					    schema:
						    type: array
						    items:
							    type: challenge
					'400':
						description: bad request
			post:
				operationId: createChallenge
				description: Create a new Challenge object
				produces:
					- application/json
				parameters:
					- name: run_one
					  in: body
					  description: id of the first run
					  required: true
					  type: integer
					- name: name_run_one
					  in: body
					  description: name of the first run
					  required: true
					  type: float
					- name: run_two
					  in: body
					  description: id of the second run
					  required: true
					  type: integer
					- name: name_run_two
					  in: body
					  description: name of the second run
					  required: true
					  type: date
					- name: id_user
					  in: body
					  description: user id
					  required: true
					  type: integer
				responses:
					'200':
						description: challenge object
						schema:
							type: object
							item: challenge
					'400':
						description: bad request


		/challenges/{challenge_id}:
			get:
				operationId: getChallenge
				description: Return the challenge id
				produces:
					- application/json
				parameters:
					- name: challenge_id
					  in: path
					  required: true
			    responses:
				    '200':
					    description: challenge object
					    schema:
						    type: challenge
					'400':
						description: bad request
					'404':
						description: The challenge does not exists

		/statistics:
			get:
				operationId: getStatistics
				description: Describe the statistics of the selected runs
				produces:
					- application/json
				parameters:
					# TO DO
				responses:
					'200':
						description: statistics
					'400':
						description: bad request

